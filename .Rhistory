df <- dataToUse[dataToUse$Modification==mod,]
modFrequenciesPlot <- ggplot(df, aes(x = axisGroup, y = Frequency, color = Test)) +
scale_x_continuous(limits = c(-60, 140), breaks = seq(-60, 140, 20), labels = axisText) +
geom_line(aes(group = Test),linewidth = 1.3) +
geom_point(aes(group = Test), size = 2) + theme_minimal() +
scale_colour_manual(limits = c("control1", "NLRs"),
values=c("grey43", "black"), labels = c("Controls", "R-genes")) +
labs(x = "", y = "Frequency of occurrence (%)") +
geom_vline(xintercept=0, color="grey", size=1) +
coord_cartesian(ylim= c(0,100), clip = "off") + theme(plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(textGrob("% of gene length from TSS", gp=gpar(fontsize=14, col = "grey33")),xmin=0,xmax=100,ymin=-22,ymax=-22) +
annotation_custom(textGrob("Gene region", gp=gpar(fontsize=16)),xmin=0,xmax=100,ymin=-30,ymax=-30) +
theme(axis.text.x = element_text(size = 13, colour = "black", angle = 45, vjust = 1, hjust = 1), axis.text.y = element_text(size = 14,colour = "black"),
axis.title.y = element_text(size = 16, vjust = 2))
modFrequenciesPlot
df
dataToUse <- allResultsFrequencies[allResultsFrequencies$Test %in% c(names(sampleGenes)[c(1:10,33)]),]
df <- dataToUse[dataToUse$Modification==mod,]
modFrequenciesPlot <- ggplot(df, aes(x = axisGroup, y = Frequency, color = Test)) +
scale_x_continuous(limits = c(-60, 140), breaks = seq(-60, 140, 20), labels = axisText) +
geom_line(aes(group = Test),linewidth = 1.3) +
geom_point(aes(group = Test), size = 2) + theme_minimal() +
scale_colour_manual(limits = c("control1", "NLRs"),
values=c("grey43", "black"), labels = c("Controls", "R-genes")) +
labs(x = "", y = "Frequency of occurrence (%)") +
geom_vline(xintercept=0, color="grey", size=1) +
coord_cartesian(ylim= c(0,100), clip = "off") + theme(plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(textGrob("% of gene length from TSS", gp=gpar(fontsize=14, col = "grey33")),xmin=0,xmax=100,ymin=-22,ymax=-22) +
annotation_custom(textGrob("Gene region", gp=gpar(fontsize=16)),xmin=0,xmax=100,ymin=-30,ymax=-30) +
theme(axis.text.x = element_text(size = 13, colour = "black", angle = 45, vjust = 1, hjust = 1), axis.text.y = element_text(size = 14,colour = "black"),
axis.title.y = element_text(size = 16, vjust = 2))
modFrequenciesPlot
df
dataToUse <- allResultsFrequencies[c(which(allResultsFrequencies$Test %in% c(names(sampleGenes)[c(1:10,33)]))),]
df <- dataToUse[dataToUse$Modification==mod,]
modFrequenciesPlot <- ggplot(df, aes(x = axisGroup, y = Frequency, color = Test)) +
scale_x_continuous(limits = c(-60, 140), breaks = seq(-60, 140, 20), labels = axisText) +
geom_line(aes(group = Test),linewidth = 1.3) +
geom_point(aes(group = Test), size = 2) + theme_minimal() +
scale_colour_manual(limits = c("control1", "NLRs"),
values=c("grey43", "black"), labels = c("Controls", "R-genes")) +
labs(x = "", y = "Frequency of occurrence (%)") +
geom_vline(xintercept=0, color="grey", size=1) +
coord_cartesian(ylim= c(0,100), clip = "off") + theme(plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(textGrob("% of gene length from TSS", gp=gpar(fontsize=14, col = "grey33")),xmin=0,xmax=100,ymin=-22,ymax=-22) +
annotation_custom(textGrob("Gene region", gp=gpar(fontsize=16)),xmin=0,xmax=100,ymin=-30,ymax=-30) +
theme(axis.text.x = element_text(size = 13, colour = "black", angle = 45, vjust = 1, hjust = 1), axis.text.y = element_text(size = 14,colour = "black"),
axis.title.y = element_text(size = 16, vjust = 2))
modFrequenciesPlot
df
allResultsFrequencies$Test
c(names(sampleGenes)[c(1:10,33)])
names(sampleGenesFrequencies)
rm(Atgenes)
names(sampleGenes)
for (test in names(sampleGenes)[c(1:10,33)]) {
bigExpressionData[[test]] <- as.data.frame(read_xlsx(paste("Data\\result_", test, ".xlsx", sep = "")))
}
library(readxl)
bigExpressionData <- hash()
for (test in names(sampleGenes)[c(1:10,33)]) {
bigExpressionData[[test]] <- as.data.frame(read_xlsx(paste("Data\\result_", test, ".xlsx", sep = "")))
}
bigExpressionData[[test]]
library(readxl)
library(karyoploteR)
library(rtracklayer)
library(dplyr)
library(stringr)
library(hash)
library(sets)
library(TxDb.Athaliana.BioMart.plantsmart28)
library(ggplot2)
library(data.table)
library(grid)
source("Functions\\Get range - merge gene coordinates.R")
# Import all Arabidopsis genes.
Atgenes <- as.data.frame(transcriptsBy(TxDb.Athaliana.BioMart.plantsmart28, by="gene"))
colnames(Atgenes)[2] <- "Gene"
# Remove duplicate genes (different versions).
Atgenes <- Atgenes[-c(which(Atgenes$tx_name == str_match(Atgenes$tx_name, "^([0-9a-zA-Z]+)([.])([2-9])$")[,1])),]
# Remove genes within the centromeric and pericentromeric geneRegions.
pericentromericgeneRegions <- data.frame(Chromosome = c(1:5),
Start = c("11500000", "1100000", "10300000", "1500000", "9000000"),
End = c("17700000", "7200000", "17300000", "6300000", "16000000"))
euchromaticgeneRegions <- data.frame()
for (row in 1:nrow(pericentromericgeneRegions)) {
df <- Atgenes[c(which(Atgenes$seqnames==row & Atgenes$start < as.numeric(pericentromericgeneRegions[row, "Start"]))),]
df <- rbind(df, Atgenes[c(which(Atgenes$seqnames==row & Atgenes$end > as.numeric(pericentromericgeneRegions[row, "End"]))),])
euchromaticgeneRegions <- rbind(euchromaticgeneRegions, df)
}
rm(pericentromericgeneRegions, df)
euchromaticgeneRegions <- euchromaticgeneRegions[,-c(1,8,9)]
euchromaticgeneRegions$ranges <- paste(euchromaticgeneRegions$start,"-",euchromaticgeneRegions$end, sep = "")
# Remove duplicate genes.
newEuchromaticgeneRegions <- euchromaticgeneRegions
euchromaticgeneRegions <- data.frame()
for (gene in unique(newEuchromaticgeneRegions$Gene)) {
euchromaticgeneRegions <- rbind(euchromaticgeneRegions, newEuchromaticgeneRegions[newEuchromaticgeneRegions$Gene==gene,][1,])
}
rm(newEuchromaticgeneRegions)
# Remove TEs from the euchromaticgeneRegions dataframe.
transposableElements <- as.data.frame(read_xlsx("Data\\Arabidopsis TE genes.xlsx"))
withoutTEs <- euchromaticgeneRegions[-c(which(euchromaticgeneRegions$Gene %in% transposableElements$Locus)),]
rm(transposableElements)
# Get 10 sets of random genes and store in a hash from gene dataset of interest.
source("Functions\\Sample random genes.R")
dataToUse <- withoutTEs
sampleGenes <- geneSets(dataToUse)
# Import list of R-genes.
ArabidopsisNLRs <- as.data.frame(read_xlsx("Data\\Arabidopsis NLRs.xlsx", sheet = 1))
NLRgenes <- dataToUse[which(dataToUse$Gene %in% ArabidopsisNLRs$Gene),]
# Create a ranges column by merging the start and end columns.
dataToUse <- NLRgenes
NLRgenes$ranges <- mergeCoordinates(dataToUse)
# Add R-genes to sampleGenes.
sampleGenes[["NLRs"]] <- NLRgenes
rm(ArabidopsisNLRs, NLRgenes, Atgenes)
# For each gene set in sampleGenes, save the list of genes.
for (test in names(sampleGenes)) {
write(paste(sampleGenes[[test]]$Gene, sep = "", collapse = ","), file = paste(test, "_geneList",".txt", sep = ""))
}
# Import expression data.
bigExpressionData <- hash()
for (test in names(sampleGenes)) {
bigExpressionData[[test]] <- as.data.frame(read_xlsx(paste("Data\\result_", test, ".xlsx", sep = "")))
}
# Get filtered expression data for each set of sample genes in each tissue.
# Add dataframes to sampleGenes for gene sets with particular expression levels.
source("Functions\\Get expression data.R")
sampleGenes <- expressionFiltered(bigExpressionData, sampleGenes)
names(bigExpressionData)
bigExpressionData[["control1"]]
meanExpression
names(bigExpressionData)
bigExpressionData[[test]][,c(1:nrow-1)]
bigExpressionData[[test]]
bigExpressionData[[test]][,c(1:nrow(bigExpressionData[[test]])-1)]
1:nrow(bigExpressionData[[test]])-1
leafExpression <- data.frame()
for (test in names(bigExpressionData)[11:20]) {
leafExpression <- cbind(leafExpression, bigExpressionData[[test]][,c(1:ncol(bigExpressionData[[test]])-1)])
}
test
leafExpression <- data.frame(matrix(nrow = 4))
bigExpressionData[[test]][,c(1:ncol(bigExpressionData[[test]])-1)]
bigExpressionData[[test]]
leafExpression <- data.frame()
for (test in names(bigExpressionData)[11:20]) {
leafExpression <- rbind(leafExpression, bigExpressionData[[test]])
}
leafExpression
hist(leafExpression$Expression)
names(bigExpressionData)
hist(bigExpressionData[["leaf_NLRs"]])
hist(leafExpression$Expression)
hist(bigExpressionData[["leaf_NLRs"]]$Expression)
hist(bigExpressionData[["leaf_control1"]]$Expression)
bigExpressionData[["leaf_NLRs"]]
hist(leafExpression$Expression, breaks = 10)
hist(leafExpression$Expression, breaks = 15)
hist(leafExpression$Expression, breaks = 5, xlim = c(0,10))
hist(leafExpression$Expression, xlim = c(0,10))
hist(leafExpression$Expression, breaks = 5, xlim = c(0,20))
hist(leafExpression$Expression, breaks = 5)
hist(leafExpression$Expression, breaks = 20)
hash(NoExpression = c(),
LowExpression = c(),
MedExpression = c(),
HighExpression = c(),
V.HighExpression = c())
expressionLevels <- hash(NoExpression = c(),
LowExpression = c(),
MedExpression = c(),
HighExpression = c(),
V.HighExpression = c())
for (row in 1:nrow(bigExpressionData[["leaf_NLRs"]])) {
if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] == 0) {
expressionLevels[["NoExpression"]] <- append(expressionLevels[["NoExpression"]], bigExpressionData[["leaf_NLRs"]][row, "Gene"])
}
else if (0 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 10) {
bigExpressionData[["leaf_NLRs"]][row, "Expression"]
expressionLevels <- hash(NoExpression = c(),
LowExpression = c(),
MedExpression = c(),
HighExpression = c(),
V.HighExpression = c())
for (row in 1:nrow(bigExpressionData[["leaf_NLRs"]])) {
if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] == 0) {
expressionLevels[["NoExpression"]] <- append(expressionLevels[["NoExpression"]], bigExpressionData[["leaf_NLRs"]][row, "Gene"])
}
else if (0 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 10) {
expressionLevels[["LowExpression"]] <- append(expressionLevels[["LowExpression"]], bigExpressionData[["leaf_NLRs"]][row, "Gene"])
}
else if (10 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 50) {
expressionLevels[["MedExpression"]] <- append(expressionLevels[["MedExpression"]], bigExpressionData[["leaf_NLRs"]][row, "Gene"])
}
else if (50 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"]<= 100) {
expressionLevels[["HighExpression"]] <- append(expressionLevels[["HighExpression"]], bigExpressionData[["leaf_NLRs"]][row, "Gene"])
}
else if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] > 100) {
expressionLevels[["V.HighExpression"]] <- append(expressionLevels[["V.HighExpression"]], bigExpressionData[["leaf_NLRs"]][row, "Gene"])
}
}
expressionLevels[["NoExpression"]]
allResultsFrequencies
names(sampleGenes)
sampleGenes[["NLRs"]]
nrow(sampleGenes[["NLRs"]])
nrow(bigExpressionData[["NLRs"]])
ncol(bigExpressionData[["NLRs"]])
source("Functions\\Get range - merge gene coordinates.R")
# Import all Arabidopsis genes.
Atgenes <- as.data.frame(transcriptsBy(TxDb.Athaliana.BioMart.plantsmart28, by="gene"))
colnames(Atgenes)[2] <- "Gene"
# Remove duplicate genes (different versions).
Atgenes <- Atgenes[-c(which(Atgenes$tx_name == str_match(Atgenes$tx_name, "^([0-9a-zA-Z]+)([.])([2-9])$")[,1])),]
# Remove genes within the centromeric and pericentromeric geneRegions.
pericentromericgeneRegions <- data.frame(Chromosome = c(1:5),
Start = c("11500000", "1100000", "10300000", "1500000", "9000000"),
End = c("17700000", "7200000", "17300000", "6300000", "16000000"))
euchromaticgeneRegions <- data.frame()
for (row in 1:nrow(pericentromericgeneRegions)) {
df <- Atgenes[c(which(Atgenes$seqnames==row & Atgenes$start < as.numeric(pericentromericgeneRegions[row, "Start"]))),]
df <- rbind(df, Atgenes[c(which(Atgenes$seqnames==row & Atgenes$end > as.numeric(pericentromericgeneRegions[row, "End"]))),])
euchromaticgeneRegions <- rbind(euchromaticgeneRegions, df)
}
rm(pericentromericgeneRegions, df)
euchromaticgeneRegions <- euchromaticgeneRegions[,-c(1,8,9)]
euchromaticgeneRegions$ranges <- paste(euchromaticgeneRegions$start,"-",euchromaticgeneRegions$end, sep = "")
# Remove duplicate genes.
newEuchromaticgeneRegions <- euchromaticgeneRegions
euchromaticgeneRegions <- data.frame()
for (gene in unique(newEuchromaticgeneRegions$Gene)) {
euchromaticgeneRegions <- rbind(euchromaticgeneRegions, newEuchromaticgeneRegions[newEuchromaticgeneRegions$Gene==gene,][1,])
}
rm(newEuchromaticgeneRegions)
# Remove TEs from the euchromaticgeneRegions dataframe.
transposableElements <- as.data.frame(read_xlsx("Data\\Arabidopsis TE genes.xlsx"))
withoutTEs <- euchromaticgeneRegions[-c(which(euchromaticgeneRegions$Gene %in% transposableElements$Locus)),]
rm(transposableElements)
# Get 10 sets of random genes and store in a hash from gene dataset of interest.
source("Functions\\Sample random genes.R")
dataToUse <- withoutTEs
sampleGenes <- geneSets(dataToUse)
# Import list of R-genes.
ArabidopsisNLRs <- as.data.frame(read_xlsx("Data\\Arabidopsis NLRs.xlsx", sheet = 1))
NLRgenes <- dataToUse[which(dataToUse$Gene %in% ArabidopsisNLRs$Gene),]
# Create a ranges column by merging the start and end columns.
dataToUse <- NLRgenes
NLRgenes$ranges <- mergeCoordinates(dataToUse)
# Add R-genes to sampleGenes.
sampleGenes[["NLRs"]] <- NLRgenes
rm(ArabidopsisNLRs, NLRgenes, Atgenes)
# For each gene set in sampleGenes, save the list of genes.
for (test in names(sampleGenes)) {
write(paste(sampleGenes[[test]]$Gene, sep = "", collapse = ","), file = paste(test, "_geneList",".txt", sep = ""))
}
# Import expression data.
bigExpressionData <- hash()
for (test in names(sampleGenes)) {
bigExpressionData[[test]] <- as.data.frame(read_xlsx(paste("Data\\result_", test, ".xlsx", sep = "")))
}
# Get filtered expression data for each set of sample genes in each tissue.
# Add dataframes to sampleGenes for gene sets with particular expression levels.
source("Functions\\Get expression data.R")
sampleGenes <- expressionFiltered(bigExpressionData, sampleGenes)
rm(bigExpressionData)
# Use ReMap2022 data to analyse the enrichment of chromatin marks on the R-genes and controls.
source("Functions\\Coordinates per gene region.R")
source("Functions\\Modifications per gene.R")
source("Functions\\Modification frequencies & proportions.R")
# Import filtered ReMap2022 data.
ReMap <- as.data.frame(read_xlsx("Data\\Filtered ReMap data.xlsx"))
# Create list of chromatin modifications.
epiMods <- unique(ReMap$epiMod)
# Create hashes for storing the % R-genes with a chromatin mark in each gene region (frequency)
# and the proportion of each gene region with that mark.
sampleGenesFrequencies <- hash()
sampleGenesProportions <- hash()
# Choose ecotype and tissue for analsis.
# Options: ColLeaf, ColRoot
tissueForAnalysis <- "ColLeaf"
for (test in names(sampleGenes)[33]) {
dataToUse <- sampleGenes[[test]]
# Create a hash with the ReMap data in a particular tissue for the current set of genes.
allModifications <- ReMapPerGene(dataToUse, tissueForAnalysis)
# For each gene in the current set of genes, create a new hash with the occurrences of each chromatin modification.
geneModifications <- modificationOccurrences(allModifications)
rm(allModifications)
# For each gene in the current set of genes, merge the overlapping occurrences of each modification.
allOverlaps <- mergeOverlappingModifications(geneModifications)
# Determine the % R-genes with a chromatin mark in each gene region (frequency)
# and the proportion of each gene region with that mark.
geneRegions <- getGeneCoordinates(dataToUse)
modFrequencyPerRegion <- modFrequenciesFunction(geneRegions, allOverlaps, epiMods)
modProportionPerRegion <- modProportionsFunction(geneRegions, allOverlaps, epiMods)
# Collect all hashes for modFrequencyPerRegion and modProportionPerRegion into single dataframes.
modFrequencyPerRegion <- mergeResults(modFrequencyPerRegion)
modProportionPerRegion <- mergeResults(modProportionPerRegion)
# Add a column to modFrequencyPerRegion and modProportionPerRegion with the numbers for
# each gene region that will correspond with their position on the x axis.
modFrequencyPerRegion <- geneRegionAxisLocations(modFrequencyPerRegion, geneRegions)
modProportionPerRegion <- geneRegionAxisLocations(modProportionPerRegion, geneRegions)
# Store final results on the appropriate hash.
sampleGenesFrequencies[[test]] <- modFrequencyPerRegion
sampleGenesProportions[[test]] <- modProportionPerRegion
}
rm(tissueForAnalysis, allOverlaps, modFrequencyPerRegion, modProportionPerRegion, dataToUse, ReMap)
# Merge all data from all sample gene sets into one big dataframe.
allResultsFrequencies <- data.frame()
allResultsProportions <- data.frame()
for (test in names(sampleGenesFrequencies)) {
df1 <- sampleGenesFrequencies[[test]]
df1 <- cbind(df1, data.frame(Test = rep(test, times = nrow(df1))))
allResultsFrequencies <- rbind(allResultsFrequencies, df1)
df2 <- sampleGenesProportions[[test]]
df2 <- cbind(df2, data.frame(Test = rep(test, times = nrow(df2))))
allResultsProportions <- rbind(allResultsProportions, df2)
}
rm(test, df1, df2)
allResultsFrequencies[allResultsFrequencies]
allResultsFrequencies
dataToUse <- allResultsFrequencies
df <- dataToUse[dataToUse$Modification==mod,]
plot <- ggplot(df, aes(x = axisGroup, y = Frequency, color = Test)) +
scale_x_continuous(limits = c(-60, 140), breaks = seq(-60, 140, 20), labels = axisText) +
geom_line(aes(group = Test),linewidth = 1.3) +
geom_point(aes(group = Test), size = 2) + theme_minimal() +
scale_colour_manual(limits = c("control1", "NLRs"),
values=c("grey43", "black"), labels = c("Controls", "R-genes")) +
labs(x = "", y = "Frequency of occurrence (%)") +
geom_vline(xintercept=0, color="grey", size=1) +
coord_cartesian(ylim= c(0,100), clip = "off") + theme(plot.margin = unit(c(1,1,2,1), "lines")) +
annotation_custom(textGrob("% of gene length from TSS", gp=gpar(fontsize=14, col = "grey33")),xmin=0,xmax=100,ymin=-22,ymax=-22) +
annotation_custom(textGrob("Gene region", gp=gpar(fontsize=16)),xmin=0,xmax=100,ymin=-30,ymax=-30) +
theme(axis.text.x = element_text(size = 13, colour = "black", angle = 45, vjust = 1, hjust = 1), axis.text.y = element_text(size = 14,colour = "black"),
axis.title.y = element_text(size = 16, vjust = 2))
plot
expressionLevels <- hash(NoExpression = data.frame(Gene = character(),
Expression = character()),
LowExpression = data.frame(Gene = character(),
Expression = character()),
MedExpression = data.frame(Gene = character(),
Expression = character()),
HighExpression = data.frame(Gene = character(),
Expression = character()),
V.HighExpression = data.frame(Gene = character(),
Expression = character()))
for (row in 1:nrow(bigExpressionData[["leaf_NLRs"]])) {
if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] == 0) {
expressionLevels[["NoExpression"]] <- rbind(expressionLevels[["NoExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "NoExpression"))
}
else if (0 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 10) {
expressionLevels[["LowExpression"]] <- rbind(expressionLevels[["LowExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "LowExpression"))
}
else if (10 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 50) {
expressionLevels[["MedExpression"]] <- rbind(expressionLevels[["MedExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "MedExpression"))
}
else if (50 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"]<= 100) {
expressionLevels[["HighExpression"]] <- rbind(expressionLevels[["HighExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "HighExpression"))
}
else if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] > 100) {
expressionLevels[["V.HighExpression"]] <- rbind(expressionLevels[["V.HighExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "V.HighExpression"))
}
}
bigExpressionData <- hash()
for (test in names(sampleGenes)[c(1:10,33)]) {
bigExpressionData[[test]] <- as.data.frame(read_xlsx(paste("Data\\result_", test, ".xlsx", sep = "")))
}
dataToUse <- withoutTEs
sampleGenes <- geneSets(dataToUse)
# Import list of R-genes.
ArabidopsisNLRs <- as.data.frame(read_xlsx("Data\\Arabidopsis NLRs.xlsx", sheet = 1))
NLRgenes <- dataToUse[which(dataToUse$Gene %in% ArabidopsisNLRs$Gene),]
# Create a ranges column by merging the start and end columns.
dataToUse <- NLRgenes
NLRgenes$ranges <- mergeCoordinates(dataToUse)
# Add R-genes to sampleGenes.
sampleGenes[["NLRs"]] <- NLRgenes
source("Functions\\Get expression data.R")
sampleGenes <- expressionFiltered(bigExpressionData, sampleGenes)
expressionLevels <- hash(NoExpression = data.frame(Gene = character(),
Expression = character()),
LowExpression = data.frame(Gene = character(),
Expression = character()),
MedExpression = data.frame(Gene = character(),
Expression = character()),
HighExpression = data.frame(Gene = character(),
Expression = character()),
V.HighExpression = data.frame(Gene = character(),
Expression = character()))
for (row in 1:nrow(bigExpressionData[["leaf_NLRs"]])) {
if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] == 0) {
expressionLevels[["NoExpression"]] <- rbind(expressionLevels[["NoExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "NoExpression"))
}
else if (0 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 10) {
expressionLevels[["LowExpression"]] <- rbind(expressionLevels[["LowExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "LowExpression"))
}
else if (10 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 50) {
expressionLevels[["MedExpression"]] <- rbind(expressionLevels[["MedExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "MedExpression"))
}
else if (50 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"]<= 100) {
expressionLevels[["HighExpression"]] <- rbind(expressionLevels[["HighExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "HighExpression"))
}
else if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] > 100) {
expressionLevels[["V.HighExpression"]] <- rbind(expressionLevels[["V.HighExpression"]], data.frame(Gene = bigExpressionData[["leaf_NLRs"]][row, "Gene"],
Expression = "V.HighExpression"))
}
}
expressionLevels[["NoExpression"]]
allResultsFrequencies
sampleData[["NLRs"]]
sampleGenes[["NLRs"]]
expressionData <- data.frame()
for (n in names(expressionLevels)) {
expressionData <- rbind(expressionData, expressionLevels[[n]])
}
expressionData
df <- expressionData[expressionData$Gene==gene,]
gene
expressionList <- c()
for (gene in sampleGenes[["NLRs"]]$Gene) {
df <- expressionData[expressionData$Gene==gene,]
expressionList <- append(expressionList, df$Expression)
}
expressionList
sampleGenes[["NLRs"]] <- cbind(sampleGenes[["NLRs"]], expressionList)
sampleGenes[["NLRs"]]
names(sampleGenes)
bigExpressionData[["leaf_NLRs"]]
rm(leafExpression)
sampleGenes[["NLRs"]]
sampleGenes[["NLRs"]] <- sampleGenes[["NLRs"]][,-8]
sampleGenes[["NLRs"]]
expressionList <- c()
for (gene in sampleGenes[["NLRs"]]$Gene) {
df <- bigexpressionData[bigexpressionData$Gene==gene,]
expressionList <- append(expressionList, df$Expression)
}
dataToUse <- withoutTEs
sampleGenes <- geneSets(dataToUse)
dataToUse <- NLRgenes
NLRgenes$ranges <- mergeCoordinates(dataToUse)
# Add R-genes to sampleGenes.
sampleGenes[["NLRs"]] <- NLRgenes
bigExpressionData <- hash()
for (test in names(sampleGenes)) {
bigExpressionData[[test]] <- as.data.frame(read_xlsx(paste("Data\\result_", test, ".xlsx", sep = "")))
}
# Get filtered expression data for each set of sample genes in each tissue.
# Add dataframes to sampleGenes for gene sets with particular expression levels.
source("Functions\\Get expression data.R")
sampleGenes <- expressionFiltered(bigExpressionData, sampleGenes)
expressionList <- c()
for (gene in sampleGenes[["NLRs"]]$Gene) {
df <- bigexpressionData[bigexpressionData$Gene==gene,]
expressionList <- append(expressionList, df$Expression)
}
expressionList <- c()
for (gene in sampleGenes[["NLRs"]]$Gene) {
df <- bigExpressionData[bigExpressionData$Gene==gene,]
expressionList <- append(expressionList, df$Expression)
}
expressionList
bigExpressionData$Gene
bigExpressionData[["NLRs]][bigExpressionData[["NLRs]]$Gene==gene,]
bigExpressionData[["NLRs"]][bigExpressionData[["NLRs"]]$Gene==gene,]
bigExpressionData[["NLRs"]]
names(bigExpressionData)
bigExpressionData[["leaf_NLRs"]]
expressionList <- c()
for (gene in sampleGenes[["NLRs"]]$Gene) {
df <- bigExpressionData[["leaf_NLRs"]][bigExpressionData[["leaf_NLRs"]]$Gene==gene,]
expressionList <- append(expressionList, df$Expression)
}
expressionList
sampleGenes[["NLRs"]] <- cbind(sampleGenes[["NLRs"]], data.frame(Expression = expressionList))
sampleGenes[["NLRs"]]
expressionData
expressionLevels <- hash(NoExpression = data.frame(),
LowExpression = data.frame(),
MedExpression = data.frame(),
HighExpression = data.frame(),
V.HighExpression = data.frame())
for (row in 1:nrow(sampleGenes[["NLRs"]])) {
if (sampleGenes[["NLRs"]][row, "Expression"] == 0) {
expressionLevels[["NoExpression"]] <- rbind(expressionLevels[["NoExpression"]], sampleGenes[["NLRs"]][row,])
}
else if (0 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 10) {
expressionLevels[["LowExpression"]] <- rbind(expressionLevels[["LowExpression"]], sampleGenes[["NLRs"]][row,])
}
else if (10 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"] <= 50) {
expressionLevels[["MedExpression"]] <- rbind(expressionLevels[["MedExpression"]], sampleGenes[["NLRs"]][row,])
}
else if (50 < bigExpressionData[["leaf_NLRs"]][row, "Expression"] & bigExpressionData[["leaf_NLRs"]][row, "Expression"]<= 100) {
expressionLevels[["HighExpression"]] <- rbind(expressionLevels[["HighExpression"]], sampleGenes[["NLRs"]][row,])
}
else if (bigExpressionData[["leaf_NLRs"]][row, "Expression"] > 100) {
expressionLevels[["V.HighExpression"]] <- rbind(expressionLevels[["V.HighExpression"]], sampleGenes[["NLRs"]][row,])
}
}
expressionLevels[["NoExpression"]]
