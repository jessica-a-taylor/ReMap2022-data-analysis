theme(axis.text.x = element_text(size = 11, colour = "black", angle = 45, vjust = 1, hjust = 1), axis.text.y = element_text(size = 12,colour = "black"),
axis.title.y = element_text(size = 14, vjust = 2), strip.text = element_text(size = 16)) +
facet_wrap(~Comparison) +
stat_summary(fun="mean", geom="point", color="black", size=2) +
stat_summary(fun="mean", geom="line", color="black", size=1)
ggsave(paste(mod, "_", "Clustered vs Unclustered.pdf", sep = ""), plot = plot, width = 16, height = 6)
}
write.csv(statTestDF, file = "Difference in proportion of gene region modified.csv")
# Import analysed ReMap data.
allResultsFrequencies <- as.data.frame(read_xlsx("Data\\allResultsFrequencies.xlsx"))
allResultsProportions <- as.data.frame(read_xlsx("Data\\allResultsProportions.xlsx"))
head(allResultsFrequencies)
allResultsFrequencies[allResultsFrequencies$SampleGenes=="control1_Seedling"]
allResultsFrequencies[allResultsFrequencies$SampleGenes=="control1_Seedling",]
mod
mod <- "H3K4me3"
r
r <- "Gene20"
df <- allResultsFrequencies[allResultsFrequencies$Modification==mod,]
df1 <- df[df$Region==r,]
df1
df <- allResultsFrequencies[grepl("_Seedling"),]
df <- allResultsFrequencies[grepl("_Seedling", allResultsFrequencies$SampleGenes),]
df1 <- df[df$Modification==mod,]
df2 <- df1[df1$Region==r,]
df3 <- df2[df2$Expression==level,]
level <- "No Expression"
df3 <- df2[df2$Expression==level,]
df3
nrow(sampleGenes[["clusteredNLRs_Seedling"]][["No Expression"]])
nrow(sampleGenes[["control1_Seedling"]][["No Expression"]])
nrow(sampleGenes[["control2_Seedling"]][["No Expression"]])
geneList
geneRegions
allOverlaps
modFrequenciesFunction <- function (geneRegions, allOverlaps, epiMods) {
modFrequencyPerRegion <- hash()
for (r in names(geneRegions)) {
modFrequenciesDF <- data.frame(Region= character(),
Modification = character(),
Frequency = numeric())
if (length(names(allOverlaps)) >= 1) {
for (mod in epiMods) {
geneList <- c()
for (n in names(allOverlaps)) {
modPresent <- FALSE
if (nrow(allOverlaps[[n]][[mod]]) >= 1 & n %in% geneRegions[[r]]$Gene == TRUE) {
for (row in 1:nrow(allOverlaps[[n]][[mod]])) {
if (overlapsFunction(as.numeric(allOverlaps[[n]][[mod]][row, "start"]), as.numeric(allOverlaps[[n]][[mod]][row, "end"]),
as.numeric(geneRegions[[r]][geneRegions[[r]]$Gene==n,]$start), as.numeric(geneRegions[[r]][geneRegions[[r]]$Gene==n,]$end))==TRUE) {
modPresent <- TRUE
}
else modPresent <- modPresent
}
if (modPresent == TRUE) {
geneList <- append(geneList, n)
}
else geneList <- geneList
}
}
modFrequenciesDF <- rbind(modFrequenciesDF, data.frame(Region = r,
Modification = mod,
Frequency = length(geneList)/length(names(allOverlaps))*100,
n = length(geneList)))
}
} else modFrequenciesDF <- modFrequenciesDF
modFrequencyPerRegion[[r]] <- modFrequenciesDF
}
return(modFrequencyPerRegion)
}
modFrequencyPerRegion[["Gene20"]]
modFrequencyPerRegion <- hash()
for (r in names(geneRegions)) {
modFrequenciesDF <- data.frame(Region= character(),
Modification = character(),
Frequency = numeric())
if (length(names(allOverlaps)) >= 1) {
for (mod in epiMods) {
geneList <- c()
for (n in names(allOverlaps)) {
modPresent <- FALSE
if (nrow(allOverlaps[[n]][[mod]]) >= 1 & n %in% geneRegions[[r]]$Gene == TRUE) {
for (row in 1:nrow(allOverlaps[[n]][[mod]])) {
if (overlapsFunction(as.numeric(allOverlaps[[n]][[mod]][row, "start"]), as.numeric(allOverlaps[[n]][[mod]][row, "end"]),
as.numeric(geneRegions[[r]][geneRegions[[r]]$Gene==n,]$start), as.numeric(geneRegions[[r]][geneRegions[[r]]$Gene==n,]$end))==TRUE) {
modPresent <- TRUE
}
else modPresent <- modPresent
}
if (modPresent == TRUE) {
geneList <- append(geneList, n)
}
else geneList <- geneList
}
}
modFrequenciesDF <- rbind(modFrequenciesDF, data.frame(Region = r,
Modification = mod,
Frequency = length(geneList)/length(names(allOverlaps))*100,
n = length(geneList)))
}
} else modFrequenciesDF <- modFrequenciesDF
modFrequencyPerRegion[[r]] <- modFrequenciesDF
}
modFrequencyPerRegion[["Gene20"]]
geneList
n
names(allOverlaps)
names(geneRegions)
geneRegions[["Gene20"]]
nrow(geneRegions[["Gene20"]])
length(geneList)
length(names(allOverlaps))
r
mod
modFrequencyPerRegion[[r]]
DF <- data.frame(Region = character(),
Modification = character(),
Measure = numeric())
for (r in level) {
DF <- rbind(DF, modProportionPerRegion[[r]])
}
DF
DF <- data.frame(Region = character(),
Modification = character(),
Measure = numeric(),
n = numeric())
for (r in level) {
DF <- rbind(DF, modFrequencyPerRegion[[r]])
}
DF
modFrequencyPerRegion[[r]]
r
r <- "UpstreamIntergenic"
modFrequencyPerRegion[[r]]
DF <- data.frame(Region = character(),
Modification = character(),
Measure = numeric(),
n = numeric())
for (r in level) {
DF <- rbind(DF, modFrequencyPerRegion[[r]])
}
DF
region = c("UpstreamIntergenic", "Promotor1000", "Promotor500",
"Gene20", "Gene40", "Gene60", "Gene80", "Gene100",
"Downstream", "DownstreamIntergenic")
DF <- data.frame(Region = character(),
Modification = character(),
Measure = numeric(),
n = numeric())
for (r in region) {
DF <- rbind(DF, modFrequencyPerRegion[[r]])
}
DF
geneRegions
dataToUse <- modFrequencyPerRegion
grouping <- c(seq(from = -60, to = -20, by = 20),seq(from = 20, to = 140, by = 20))
axisGroup <- c()
for (c in 1:length(names(geneRegions))) {
axisGroup <- append(axisGroup, rep(grouping[c], times = nrow(dataToUse[dataToUse$Region == names(geneRegions)[c],])))
}
dataToUse
dataToUse <- DF
grouping <- c(seq(from = -60, to = -20, by = 20),seq(from = 20, to = 140, by = 20))
axisGroup <- c()
for (c in 1:length(names(geneRegions))) {
axisGroup <- append(axisGroup, rep(grouping[c], times = nrow(dataToUse[dataToUse$Region == names(geneRegions)[c],])))
}
dataToUse <- cbind(dataToUse, axisGroup)
dataToUse
if (nrow(dataToUse) >= 1) {
dataToUse <- cbind(dataToUse, data.frame(Expression = rep(level, times = nrow(dataToUse))))
}
else dataToUse <- dataToUse
dataToUse
test
df3
df
df3 <- df3[c(2:11),]
df1 <- allResultsFrequencies[allResultsFrequencies$Modification==mod,]
df2 <- df1[df1$Region==r,]
df3 <- df2[df2$Expression==level,]
df3
df <- allResultsFrequencies[grepl("_Seedling", allResultsFrequencies$SampleGenes),]
df1 <- df[df$Modification==mod,]
df2 <- df1[df1$Region==r,]
df3 <- df2[df2$Expression==level,]
df3 <- df3[c(2:11),]
df3
DF
dataToUse
df3 <- df2[df2$Expression==level,]
df3 <- df3[c(2:12),]
df3
length(grepl("NLRs", df3$SampleGenes))
grepl("NLRs", df3$SampleGenes)
length(df3[grepl("NLRs", df3$SampleGenes)])
length(df3[grepl("NLRs", df3$SampleGenes),])
df3$SampleGenes
df3[grepl("NLRs", df3$SampleGenes),]
geneList <- df3$SampleGenes
length(geneList[grepl("NLRs", geneList)])
head(allResultsProportions)
# Calculate the mean proportion of overlap and add as a new column to the dataframe.
allResultsAverageProportions <- data.frame()
for (test in unique(allResultsProportions$SampleGenes)) {
df <- allResultsProportions[allResultsProportions$SampleGenes==test,]
for (level in unique(allResultsProportions$Expression)) {
df1 <- df[df$Expression==level,]
if (nrow(df1) >= 1) {
for (mod in unique(allResultsProportions$Modification)) {
df2 <- df1[df1$Modification==mod,]
for (r in unique(allResultsProportions$Region)) {
df3 <- df2[df2$Region==r,]
if (nrow(df3) >= 10) {
allResultsAverageProportions <- rbind(allResultsAverageProportions, data.frame(Region = r,
Modification = mod,
Proportion = mean(df3$Proportion),
Tissue = df3$SampleGenes[1],
axisGroup = df3$axisGroup[1],
Expression = level,
SampleSize = paste(level,
paste("(n = ", nrow(df3), ")", sep = ""), sep = " ")))
}
else allResultsAverageProportions <- allResultsAverageProportions
}
}
} else allResultsAverageProportions <- allResultsAverageProportions
}
}
head(allResultsAverageProportions)
dataToUse <- allResultsAverageProportions[grepl("NLRs_Seedling", allResultsAverageProportions$Tissue),]
dataToUse
dataToUse <- allResultsAverageProportions[c(which(allResultsAverageProportions$Tissue == "NLRs_Seedling")),]
dataToUse
union(allResultsAverageProportions$Tissue)
unique(allResultsAverageProportions$Tissue)
unique(allResultsProportions$SampleGenes)
head(allResultsFrequencies)
unique(allResultsFrequencies$SampleGenes)
allResultsProportions <- as.data.frame(read_xlsx("Data\\allResultsProportions.xlsx"))
unique(allResultsProportions$SampleGenes)
dataToUse <- allResultsAverageProportions[c(which(allResultsAverageProportions$Tissue == "control1_Seedling")),]
dataToUse
df <- allResultsAverageProportions[allResultsAverageProportions$Modification==mod,]
df1 <- df[df$Region==r,]
df1
df1[!grepl("clustered", df1$Tissue),]
tissue <- c("Leaf", "Root", "Seedling")
df1[grepl("clustered", df1$Tissue),]
t
t <- "Seedling"
df <- allResultsAverageProportions[grepl(t, allResultsAverageProportions$Tissue),]
df
df1 <- df[df$Modification==mod,]
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
df2
statTestDF <- data.frame(Tissue = character(),
Modification = character(),
Region = character(),
W.statistic = numeric(),
p.value = numeric())
for (t in tissue) {
df <- allResultsAverageProportions[grepl(t, allResultsAverageProportions$Tissue),]
for (mod in unique(allResultsAverageProportions$Modification)) {
df1 <- df[df$Modification==mod,]
for (r in unique(allResultsAverageProportions$Region)) {
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
statTest <- wilcox.test(Proportion~Tissue, df2)
statTestDF <- rbind(statTestDF, data.frame(Tissue = t,
Modification = mod,
Region = r,
W.statistic = statTest$statistic,
p.value = statTest$p.value))
}
}
}
statTest <- kruskal.test(Proportion~Tissue, df2)
statTest
statTestDF <- data.frame(Tissue = character(),
Modification = character(),
Region = character(),
W.statistic = numeric(),
p.value = numeric())
for (t in tissue) {
df <- allResultsAverageProportions[grepl(t, allResultsAverageProportions$Tissue),]
for (mod in unique(allResultsAverageProportions$Modification)) {
df1 <- df[df$Modification==mod,]
for (r in unique(allResultsAverageProportions$Region)) {
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
statTest <- kruskal.test(Proportion~Tissue, df2)
statTestDF <- rbind(statTestDF, data.frame(Tissue = t,
Modification = mod,
Region = r,
W.statistic = statTest$statistic,
p.value = statTest$p.value))
}
}
}
statTestDF
controlSets <- c("control1","control2","control3","control4","control5",
"control6","control7","control8","control9","control10",)
controlSets <- c("control1","control2","control3","control4","control5",
"control6","control7","control8","control9","control10")
statTestHash <- hash()
for (t in tissue) {
df <- allResultsAverageProportions[grepl(t, allResultsAverageProportions$Tissue),]
for (mod in unique(allResultsAverageProportions$Modification)) {
df1 <- df[df$Modification==mod,]
for (r in unique(allResultsAverageProportions$Region)) {
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
statTestDF <- data.frame(Tissue = character(),
Modification = character(),
Region = character(),
W.statistic = numeric(),
p.value = numeric())
for (set in controlSets) {
statTest <- wilcox.test(Proportion~Tissue, df2)
statTestDF <- rbind(statTestDF, data.frame(Tissue = t,
Modification = mod,
Region = r,
W.statistic = statTest$statistic,
p.value = statTest$p.value))
statTestHash[[set]] <- statTestDF
}
}
}
}
# particular modification between R-genes and controls?
statTestHash <- hash()
for (t in tissue) {
df <- allResultsAverageProportions[grepl(t, allResultsAverageProportions$Tissue),]
for (mod in unique(allResultsAverageProportions$Modification)) {
df1 <- df[df$Modification==mod,]
for (r in unique(allResultsAverageProportions$Region)) {
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
statTestDF <- data.frame(Tissue = character(),
Modification = character(),
Region = character(),
W.statistic = numeric(),
p.value = numeric())
for (set in controlSets) {
statTest <- wilcox.test(Proportion~Tissue, df2[grepl(set,df2$Tissue),])
statTestDF <- rbind(statTestDF, data.frame(Tissue = t,
Modification = mod,
Region = r,
W.statistic = statTest$statistic,
p.value = statTest$p.value))
statTestHash[[set]] <- statTestDF
}
}
}
}
set
df2[grepl(set,df2$Tissue),]
df2$Tissue
df2
df <- allResultsProportions[grepl(t, allResultsProportions$Tissue),]
df1 <- df[df$Modification==mod,]
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
View(statTestDF)
df2
head(allResultsProportions)
df <- allResultsProportions[grepl(t, allResultsProportions$SampleGenes),]
df1 <- df[df$Modification==mod,]
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$Tissue),]
df2
allResultsProportions$SampleGenes
df
df1
df2
df2 <- df1[df1$Region==r,]
df2 <- df2[!grepl("clustered", df2$SampleGenes),]
df2
unique(df2$SampleGenes)
library(readxl)
library(karyoploteR)
library(rtracklayer)
library(dplyr)
library(stringr)
library(hash)
library(sets)
library(TxDb.Athaliana.BioMart.plantsmart28)
library(ggplot2)
library(data.table)
library(grid)
library(readr)
source("Functions\\Get range - merge gene coordinates.R")
# Import all Arabidopsis genes.
Atgenes <- as.data.frame(transcriptsBy(TxDb.Athaliana.BioMart.plantsmart28, by="gene"))
colnames(Atgenes)[2] <- "Gene"
# Remove duplicate genes (different versions).
Atgenes <- Atgenes[-c(which(Atgenes$tx_name == str_match(Atgenes$tx_name, "^([0-9a-zA-Z]+)([.])([2-9])$")[,1])),]
# Remove genes within the centromeric and pericentromeric geneRegions.
pericentromericgeneRegions <- data.frame(Chromosome = c(1:5),
Start = c("11500000", "1100000", "10300000", "1500000", "9000000"),
End = c("17700000", "7200000", "17300000", "6300000", "16000000"))
euchromaticgeneRegions <- data.frame()
for (row in 1:nrow(pericentromericgeneRegions)) {
df <- Atgenes[c(which(Atgenes$seqnames==row & Atgenes$start < as.numeric(pericentromericgeneRegions[row, "Start"]))),]
df <- rbind(df, Atgenes[c(which(Atgenes$seqnames==row & Atgenes$end > as.numeric(pericentromericgeneRegions[row, "End"]))),])
euchromaticgeneRegions <- rbind(euchromaticgeneRegions, df)
}
rm(pericentromericgeneRegions, df)
euchromaticgeneRegions <- euchromaticgeneRegions[,-c(1,8,9)]
euchromaticgeneRegions$ranges <- paste(euchromaticgeneRegions$start,"-",euchromaticgeneRegions$end, sep = "")
# Remove duplicate genes.
newEuchromaticgeneRegions <- euchromaticgeneRegions
euchromaticgeneRegions <- data.frame()
for (gene in unique(newEuchromaticgeneRegions$Gene)) {
euchromaticgeneRegions <- rbind(euchromaticgeneRegions, newEuchromaticgeneRegions[newEuchromaticgeneRegions$Gene==gene,][1,])
}
rm(newEuchromaticgeneRegions)
# Remove TEs from the euchromaticgeneRegions dataframe.
transposableElements <- as.data.frame(read_xlsx("Data\\Arabidopsis TE genes.xlsx"))
withoutTEs <- euchromaticgeneRegions[-c(which(euchromaticgeneRegions$Gene %in% transposableElements$Locus)),]
rm(transposableElements)
# Get 10 sets of random genes and store in a hash from gene dataset of interest.
source("Functions\\Sample random genes.R")
dataToUse <- withoutTEs
sampleGenes <- geneSets(dataToUse)
# Import list of R-genes.
ArabidopsisNLRs <- as.data.frame(read_xlsx("Data\\Arabidopsis NLRs.xlsx", sheet = 1))
clusteredNLRs <- ArabidopsisNLRs[grepl("cluster", ArabidopsisNLRs$Clustering),]
notClusteredNLRs <- ArabidopsisNLRs[c(which(ArabidopsisNLRs$Clustering =="single")),]
NLRgenes <- dataToUse[which(dataToUse$Gene %in% ArabidopsisNLRs$Gene),]
NLRgenes <- cbind(NLRgenes,
data.frame(Clustering = ArabidopsisNLRs[which(ArabidopsisNLRs$Gene %in% NLRgenes$Gene),"Clustering"]))
clusteredNLRgenes <- dataToUse[which(dataToUse$Gene %in% clusteredNLRs$Gene),]
clusteredNLRgenes <- cbind(clusteredNLRgenes,
data.frame(Clustering = clusteredNLRs[which(clusteredNLRs$Gene %in% clusteredNLRgenes$Gene),"Clustering"]))
notClusteredNLRgenes <- dataToUse[which(dataToUse$Gene %in% notClusteredNLRs$Gene),]
notClusteredNLRgenes <- cbind(notClusteredNLRgenes,
data.frame(Clustering = notClusteredNLRs[which(notClusteredNLRs$Gene %in% notClusteredNLRgenes$Gene),"Clustering"]))
# Add R-genes to sampleGenes.
sampleGenes[["NLRs"]] <- NLRgenes
sampleGenes[["clusteredNLRs"]] <- clusteredNLRgenes
sampleGenes[["notClusteredNLRs"]] <- notClusteredNLRgenes
rm(ArabidopsisNLRs, NLRgenes, Atgenes)
# Get filtered expression data for each set of sample genes in each tissue.
# Add dataframes to sampleGenes for gene sets with particular expression levels.
source("Functions\\PlantExp.R")
exLevel <- c("No Expression", "Low Expression", "Intermediate Expression",
"High Expression", "V.High Expression")
sampleGenes <- PlantExp(sampleGenes, exLevel)
source("Functions\\Modifications per gene.R")
source("Functions\\Coordinates per gene region.R")
source("Functions\\Modification frequencies & proportions.R")
# Import filtered ReMap2022 data.
ReMap <- as.data.frame(read_xlsx("Data\\Filtered ReMap data.xlsx"))
epiMods <- unique(ReMap$epiMod)
test
names(sampleGenes)[grepl("_Leaf",names(sampleGenes))]
names(sampleGenes)[grepl("_",names(sampleGenes))]
test <- "control1_Leaf"
level <- "No Expression"
exLevel
dataToUse <- sampleGenes[[test]][[level]]
allModifications <- ReMapPerGene(dataToUse, tissueForAnalysis)
tissueForAnalysis <- "ColLeaf"
allModifications <- ReMapPerGene(dataToUse, tissueForAnalysis)
geneModifications <- modificationOccurrences(allModifications)
allOverlaps <- mergeOverlappingModifications(geneModifications)
rm(test, df1, df2, tissueForAnalysis, allOverlaps, modFrequencyPerRegion, modProportionPerRegion, dataToUse)
install.packages("rstudioapi")
library()
library(rstudioapi)
sampleGenesFrequencies <- hash()
sampleGenesProportions <- hash()
# Choose ecotype and tissue for analsis.
# Options: ColLeaf, ColRoot
tissueForAnalysis <- "ColLeaf"
genesForAnalysis <- c("AT1G72840","AT1G72850","AT1G72852","AT1G72860","AT1G72870","AT1G72890",
"AT1G72900","AT1G72910","AT1G72920","AT1G72930", "AT1G72940","AT1G72950")
test <- "control1_Seedling"
level <- "No Expression"
dataToUse <- sampleGenes[[test]][[level]]
allModifications <- ReMapPerGene(dataToUse, tissueForAnalysis)
geneModifications <- modificationOccurrences(allModifications)
names(geneModifications)
geneModifications[["AT1G03670"]]
names(geneModifications[["AT1G03670"]])
geneModifications[["AT1G03670"]][["H3K4me3"]]
allOverlaps <- mergeOverlappingModifications(geneModifications)
library(sets)
allOverlaps <- mergeOverlappingModifications(geneModifications)
library(stringr)
allOverlaps <- mergeOverlappingModifications(geneModifications)
geneRegions <- getGeneCoordinates(dataToUse)
library(readxl)
library(karyoploteR)
library(rtracklayer)
library(dplyr)
library(stringr)
library(hash)
library(sets)
library(TxDb.Athaliana.BioMart.plantsmart28)
library(ggplot2)
library(data.table)
library(grid)
library(readr)
geneRegions <- getGeneCoordinates(dataToUse)
modFrequencyPerRegion <- modFrequenciesFunction(geneRegions, allOverlaps, epiMods)
modFrequencyPerRegion <- geneRegionAxisLocations(modFrequencyPerRegion, geneRegions)
modFrequencyPerRegion <- expressionColumn(modFrequencyPerRegion, level)
modFrequencyPerRegion
