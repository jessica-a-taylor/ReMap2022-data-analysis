filenames <- list.files(path = "Data\\PlantExp data\\Seedling", pattern="*.tsv")
expressionData <- data.frame()

# Merge the data from all files.
for (file in filenames) {
  expressionData <- rbind(expressionData, as.data.frame(read_tsv(paste("Data\\PlantExp data\\Seedling\\", file, sep = ""), show_col_types = FALSE)))
}


expressionData <- expressionData[c(which(expressionData$geneId %in% sampleGenes[["NLRs"]]$Gene)),]
expressionData <- expressionData[,-c(2,3,5)]

NLRexpression <- data.frame()

for (gene in unique(expressionData$geneId)) {
  df <- expressionData[expressionData$geneId==gene,]
  
  
  NLRexpression <- rbind(NLRexpression, data.frame(Gene = gene,
                                                 FPKM = mean(df$FPKM)))
}

NLRlevel <- c()
FPKM <- c()


for (gene in sampleGenes[["NLRs"]]$Gene) {
  if (0 <= NLRexpression[NLRexpression$Gene==gene, "FPKM"] & NLRexpression[NLRexpression$Gene==gene, "FPKM"] <= 10) {
    NLRlevel <- append(NLRlevel, "No Expression")
  }
  else if (10 < NLRexpression[NLRexpression$Gene==gene, "FPKM"] & NLRexpression[NLRexpression$Gene==gene, "FPKM"] <= 50) {
    NLRlevel <- append(NLRlevel, "Low Expression")
  }
  else if (50 < NLRexpression[NLRexpression$Gene==gene, "FPKM"] & NLRexpression[NLRexpression$Gene==gene, "FPKM"] <= 100) {
    NLRlevel <- append(NLRlevel, "Intermediate Expression")
  }
  else if (100 < NLRexpression[NLRexpression$Gene==gene, "FPKM"] & NLRexpression[NLRexpression$Gene==gene, "FPKM"]<= 200) {
    NLRlevel <- append(NLRlevel, "High Expression")
  }
  else if (NLRexpression[NLRexpression$Gene==gene, "FPKM"] > 200) {
    NLRlevel <- append(NLRlevel, "V.High Expression")
  }
  FPKM <- append(FPKM, NLRexpression[NLRexpression$Gene==gene, "FPKM"])
}
sampleGenes[["NLRs"]] <- cbind(sampleGenes[["NLRs"]], data.frame(PlantExpLevel = NLRlevel))
sampleGenes[["NLRs"]] <- cbind(sampleGenes[["NLRs"]], data.frame(PlantExpExpression = FPKM))


source("Functions\\Overlaps functions.R")
source("Functions\\Modifications per gene.R")
source("Functions\\Coordinates per gene region.R")
source("Functions\\Modification frequencies & proportions.R")

# Create hashes for storing the % R-genes with a chromatin mark in each gene region (frequency)
# and the proportion of each gene region with that mark.
sampleGenesFrequencies <- hash()
sampleGenesProportions <- hash()

# Generate a list of the number of genes in each set.
geneCount <- data.frame()

# Choose ecotype and tissue for analysis.
# Options: ColLeaf, ColRoot
tissueForAnalysis <- "ColLeaf"


for (level in names(sampleGenes[["otherNLRs"]])) {
  dataToUse <- sampleGenes[["otherNLRs"]][[level]]
  # dataToUse <- sampleGenes[[test]][[level]][c(which(sampleGenes[[test]][[level]]$Gene %in% genesForAnalysis)),]
  
  # Create a hash with the ReMap data in a particular tissue for the current set of genes. 
  allModifications <- ReMapPerGene(dataToUse, tissueForAnalysis)
  
  # For each gene in the current set of genes, create a new hash with the occurrences of each chromatin modification.
  geneModifications <- modificationOccurrences(allModifications)
  
  rm(allModifications)
  
  # For each gene in the current set of genes, merge the overlapping occurrences of each modification.
  allOverlaps <- mergeOverlappingModifications(geneModifications)
  
  geneCount <- rbind(geneCount, data.frame(GeneSet = paste(test, "_", level, sep = ""),
                                           GeneCount = length(names(allOverlaps))))
  print(length(names(allOverlaps)))
  
  rm(geneModifications)
  
  # Determine the % R-genes with a chromatin mark in each gene region (frequency)
  # and the proportion of each gene region with that mark.
  geneRegions <- getGeneCoordinates(dataToUse)
  
  modFrequencyPerRegion <- modFrequenciesFunction(geneRegions, allOverlaps, epiMods)
  modProportionPerRegion <- modProportionsFunction(geneRegions, allOverlaps, epiMods)
  
  # Add a column to modFrequencyPerRegion and modProportionPerRegion with the numbers for 
  # each gene region that will correspond with their position on the x axis.
  modFrequencyPerRegion <- geneRegionAxisLocations(modFrequencyPerRegion, geneRegions)
  modProportionPerRegion <- geneRegionAxisLocations(modProportionPerRegion, geneRegions)
  
  rm(geneRegions)
  
  # Add a column to modFrequencyPerRegion and modProportionPerRegion with the current expression level.
  modFrequencyPerRegion <- expressionColumn(modFrequencyPerRegion, level)
  modProportionPerRegion <- expressionColumn(modProportionPerRegion, level)
  
  # Store final results on the appropriate hash.
  sampleGenesFrequencies[[level]] <- modFrequencyPerRegion
  sampleGenesProportions[[level]] <- modProportionPerRegion
  
  print(level)
}


write.csv(geneCount, file = paste("Data\\OtherNLRs gene count.txt", sep=""))

# Merge all data from all sample gene sets into one big dataframe.
allResultsFrequencies <- data.frame()
allResultsProportions <- data.frame()

for (level in names(sampleGenes[["otherNLRs"]])) {
  df1 <- sampleGenesFrequencies[[level]]
  df1 <- cbind(df1, data.frame(SampleGenes = rep(test, times = nrow(df1))))
  
  allResultsFrequencies <- rbind(allResultsFrequencies, df1)
  
  df2 <- sampleGenesProportions[[level]]
  df2 <- cbind(df2, data.frame(SampleGenes = rep(test, times = nrow(df2))))
  
  allResultsProportions <- rbind(allResultsProportions, df2)
}


write.csv(allResultsFrequencies, file = paste("Data\\OtherNLRsallResultsFrequencies.csv", sep = ""))
write.csv(allResultsProportions, file = paste("Data\\OtherNLRsallResultsProportions.csv", sep = ""))

# Import the results.
allResultsFrequencies <- as.data.frame(read_xlsx(paste("Data\\OtherNLRsallResultsFrequencies.xlsx", sep = "")))
allResultsProportions <- as.data.frame(read_xlsx(paste("Data\\OtherNLRsallResultsProportions.xlsx", sep = "")))


# Fisher's Exact Test - are R-genes enriched amongst those that possess a particular chromatin modification?
# Plots comparing the occurrence of chromatin modifications in the seedlings of R-genes and controls.
# Fisher's Exact Test - are R-genes enriched amongst those that possess a particular chromatin modification?
geneCount <- as.data.frame(read_csv("Data\\OtherNLRs gene count.txt"))
geneCount <- geneCount[,-1]

df <- allResultsFrequencies[grepl(tissue, allResultsFrequencies$SampleGenes),]

hypergeometricTest <- data.frame()

for (mod in unique(allResultsFrequencies$Modification)) {
  df1 <- df[df$Modification==mod,]
  
  for (r in unique(allResultsFrequencies$Region)) {
    df2 <- df1[df1$Region==r,]
    
    for (level in c("No Expression", "Low Expression")) {
      df3 <- df2[df2$Expression==level,]
      df3 <- df3[!grepl("luster", df3$SampleGenes),]
      
      if (nrow(df3) > 1) {
        
        # Calculate the number of modified and unmodified R-genes and control genes.
        
        RgenesModified <- geneCount[grepl("NLRs", geneCount$GeneSet) & !grepl("luster", geneCount$GeneSet) &
                                      grepl(level, geneCount$GeneSet), "GeneCount"] * df3[grepl("NLRs", df3$SampleGenes), "Frequency"]/100
        
        RgenesUnmodified <- geneCount[grepl("NLRs", geneCount$GeneSet) & !grepl("luster", geneCount$GeneSet) &
                                        grepl(level, geneCount$GeneSet), "GeneCount"] - RgenesModified
        
        allControls <- c()
        controlGenesModified <- c()
        
        for (row in 1:nrow(df3[grepl("control", df3$SampleGenes),])) {
          allControls <- append(allControls, geneCount[grepl(df3[row, "SampleGenes"], geneCount$GeneSet) &
                                                         grepl(level, geneCount$GeneSet), "GeneCount"])
          
          controlGenesModified <- append(controlGenesModified,
                                         geneCount[grepl(df3[row,"SampleGenes"], geneCount$GeneSet) & 
                                                     grepl(level, geneCount$GeneSet), "GeneCount"] * df3[row, "Frequency"]/100)
        }
        allControls <- sum(allControls)
        controlGenesModified <- sum(controlGenesModified)
        
        statTest <- fisher.test(data.frame(NLR = c(RgenesModified, RgenesUnmodified),
                                           Control = c(controlGenesModified, allControls-controlGenesModified),
                                           row.names = c("Modified", "Unmodified")), alternative = "less")
        
        if (statTest$p.value <= 0.05 & statTest$p.value > 0.01) {
          hypergeometricTest <- rbind(hypergeometricTest, data.frame(Expression = level,
                                                                     Modification = mod,
                                                                     Region = r,
                                                                     Modified.Rgenes = RgenesModified,
                                                                     Unmodified.Rgenes = RgenesUnmodified,
                                                                     Modified.controls = controlGenesModified,
                                                                     Unmodified.controls = allControls-controlGenesModified,
                                                                     p.value = statTest$p.value,
                                                                     Significance = "*"))
        } else if (statTest$p.value <= 0.01 & statTest$p.value > 0.001) {
          hypergeometricTest <- rbind(hypergeometricTest, data.frame(Expression = level,
                                                                     Modification = mod,
                                                                     Region = r,
                                                                     Modified.Rgenes = RgenesModified,
                                                                     Unmodified.Rgenes = RgenesUnmodified,
                                                                     Modified.controls = controlGenesModified,
                                                                     Unmodified.controls = allControls-controlGenesModified,
                                                                     p.value = statTest$p.value,
                                                                     Significance = "**"))
        } else if (statTest$p.value <= 0.001){
          hypergeometricTest <- rbind(hypergeometricTest, data.frame(Expression = level,
                                                                     Modification = mod,
                                                                     Region = r,
                                                                     Modified.Rgenes = RgenesModified,
                                                                     Unmodified.Rgenes = RgenesUnmodified,
                                                                     Modified.controls = controlGenesModified,
                                                                     Unmodified.controls = allControls-controlGenesModified,
                                                                     p.value = statTest$p.value,
                                                                     Significance = "***"))
        }
      }
    }
  }
  print("Test done")
}

write.csv(hypergeometricTest, file = paste("Tests\\", tissue, "_Fisher.Test_frequencies.csv", sep = ""))

# Plots comparing the occurrence of chromatin modifications in the seedlings of R-genes and controls.
axisText <- c("Intergenic", "Promotor \n(1kb)", "Promotor \n(500bp)", "TSS",
              "20%", "40%", "60%", "80%", "100%", 
              "Downstream \n(200bp)", "Intergenic")


dataToUse <- allResultsFrequencies[grepl(tissue, allResultsFrequencies$SampleGenes) & 
                                     !grepl("luster", allResultsFrequencies$SampleGenes),]
for (mod in epiMods) {
  df <- dataToUse[dataToUse$Modification==mod,]
  
  for (level in c("No Expression", "Low Expression")) {
    
    df1 <- df[df$Expression==level,]
    
    RgeneSampleSize <- geneCount[grepl("NLR", geneCount$GeneSet) & grepl(level, geneCount$GeneSet) &
                                   !grepl("luster", geneCount$GeneSet), "GeneCount"]
    controlSampleSize <- sum(geneCount[grepl("control", geneCount$GeneSet) & grepl(level, geneCount$GeneSet), "GeneCount"])
    
    
    if (RgeneSampleSize > 10) {
      plot <- ggplot(df1, aes(x = axisGroup, y = Frequency)) + 
        scale_x_continuous(limits = c(-60, 140), breaks = seq(-60, 140, 20), labels = axisText) +
        scale_y_continuous(limits = c(0,100), expand = c(0,0)) + 
        geom_line(linewidth = 1) +
        geom_point(size = 1.5) + theme_minimal() + 
        labs(x = "", y = "% Genes modified", title = paste(mod, "-", level, sep = " ")) +
        geom_vline(xintercept=0, color="grey", linewidth=1) +
        coord_cartesian(ylim= c(0,100), clip = "off") + theme(plot.margin = unit(c(1,1,.5,1), "lines")) +
        annotation_custom(textGrob("% of gene length from TSS", gp=gpar(fontsize=16, col = "grey33")),xmin=0,xmax=100,ymin=-22,ymax=-22) + 
        annotation_custom(textGrob("Gene region", gp=gpar(fontsize=16)),xmin=0,xmax=100,ymin=-30,ymax=-30) +
        theme(axis.text.x = element_text(size = 14, colour = "black", angle = 45, vjust = 1, hjust = 1), axis.text.y = element_text(size = 14,colour = "black"), 
              axis.title.y = element_text(size = 16, vjust = 2), plot.title = element_text(hjust = .5, size = 16),
              legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.line = element_line(linewidth = .6)) 
      
      ggsave(paste("Graphs\\Enrichment\\OtherNLRs percentage genes associated with ", mod, "_", level, ".pdf", sep = ""), plot = plot, width = 12, height = 6)
    }
  }
}

chineseExpression <- c()
for (row in 1:nrow(sampleGenes[["NLRs"]])) {
  chineseExpression <- append(chineseExpression, RNA_seq[which(RNA_seq$Gene == sampleGenes[["NLRs"]][row, "Gene"]), "Level"])
}

sampleGenes[["NLRs"]] <- cbind(sampleGenes[["NLRs"]], data.frame(OtherLevel = chineseExpression))

