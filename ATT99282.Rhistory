View(ReMapRPP5)
library(readxl)
library(karyoploteR)
library(rtracklayer)
ReMap <- rtracklayer::import.bed("C:\\Users\\jexy2\\OneDrive\\Documents\\PhD\\remap2022_histone_all_macs2_TAIR10_v1_0.bed.gz")
# Convert to a dataframe and define column names.
ReMap <- as.data.frame(ReMap, colnames = c("seqnames", "start", "end", "width",
"strand", "name", "score", "itemRgb",
"thick.start", "thick.end", "thick.width"))
# Filter for chromosome 4.
ReMapRPP5 <- ReMap[ReMap$seqnames==4,]
# Remove original dataset.
rm(ReMap)
ReMapRPP5 <- ReMapRPP5[ReMapRPP5$start>9488000,]
ReMapRPP5 <- ReMapRPP5[ReMapRPP5$end<9566000,]
library(dplyr)
library(stringr)
ReMapRPP5[c("exp.", "epiMod", "ecotype", "info")] <- str_match(ReMapRPP5$name, "^([0-9a-zA-Z]+)\\.([0-9a-zA-Z-]+)\\.([0-9a-zA-Z-]+)[_\\.](.*)$")[,-1]
# Filter epiMod column, excluding unwanted modifications
ReMapRPP5 <- ReMapRPP5[!ReMapRPP5$epiMod %in% c("H3", "HTR12", "H2A", "H2B", "H3T3ph", "H1") & !ReMapRPP5$ecotype %in% c("C24", "undef", "Col-x-Ler", "Ler-x-Col", "Col-x-C24"),]
# Filter info column, excluding unwanted conditions (too old, too young, wrong part of plant, etc)
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info),]
# Filter info column, checking written plant ages and removing BAD AGES
# For each row
for (row in nrow(ReMapRPP5):1) {
# Find the age if it exists (in the format 1w / 8d / 10h)
matches <- str_match(ReMapRPP5[row, "info"], "_([0-9]+)([dwh])")
# matches will be of format ["_30h", "30", "h"] (or [NA, NA, NA])
# If we found an age (ie, matches[1] is not NA)
if (!is.na(matches[1])) {
# Convert string number into integer
timeValue <- as.numeric(matches[2])
# Maximum allowed age in weeks
maxWeeks <- 3
badAge <- FALSE
if (matches[3]=="h") {
# If the age is measured in hours, it's too young. BAD AGE.
badAge <- TRUE
}
else if (matches[3]=="d" & timeValue > maxWeeks*7) {
# If the age is measured in days and it's longer than maxWeeks (converting maxWeeks to days), it's too old. BAD AGE.
badAge <- TRUE
}
else if (matches[3]=="w" & timeValue > maxWeeks) {
# If the age is measured in weeks and it's longer than maxWeeks, it's too old. BAD AGE.
badAge <- TRUE
}
# If we had a BAD AGE, delete the corresponding row. (Otherwise, move on to the next row without deleting.)
if (badAge) {
ReMapRPP5 <- ReMapRPP5[-row,]
}
}
}
# Tidy up ðŸ§¹
rm(matches, badAge, maxWeeks, row, timeValue)
View(ReMapRPP5)
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info),]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info),]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info),]
ReMapRPP5[ReMapRPP5$info %in% "c("H3", "HTR12", "H2A", "H2B", "H3T3ph", "H1")"exp)
ReMapRPP5[ReMapRPP5$info %in% "exp")
ReMapRPP5[ReMapRPP5$info %in% "exp",]
str_match(ReMapRPP5$name, "^([0-9a-zA-Z]+)\\.([0-9a-zA-Z-]+)\\.([0-9a-zA-Z-]+)[_\\.](.*)$")[,-1]
ReMapRPP5[ReMapRPP5$info %in% "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-exp",]
ReMapRPP5[ReMapRPP5$info %in% "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)",]
str_match(ReMapRPP5$info, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)",]
str_match(ReMapRPP5$info, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)")
str_match(ReMapRPP5, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)",]
str_match(ReMapRPP5, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)")
which(str_match(ReMapRPP5$info, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)"))
which(ReMapRPP5 %in% str_match(ReMapRPP5$info, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)"))
which(ReMapRPP5$info %in% str_match(ReMapRPP5$info, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)"))
p <- which(ReMapRPP5$info %in% str_match(ReMapRPP5$info, "^seedling_([0-9]+)([d])-([0-9]+)([c])-([0-9]+)([h])-(exp)"))
ReMapRPP5[p,]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.),]
rm(p)
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info),]
# Filter info column, excluding unwanted conditions (too old, too young, wrong part of plant, etc)
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info),]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.),]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info),]
unique(ReMapRPP5$info)
ReMapRPP5[ReMapRPP5$info=="seedling_3d-C2H4",]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info) & !grepl("GSE93875",ReMapRPP5$exp.),]
ReMapRPP5[ReMapRPP5$info=="leaves_3w-K36M-homoz",]
ReMapRPP5[ReMapRPP5$exp.=="GSE92449",]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info) & !grepl("GSE93875",ReMapRPP5$exp.) &
!grepl("leaves_3w-K36M-homoz",ReMapRPP5$info),]
ReMapRPP5[ReMapRPP5$info=="undef_seedling_10d-h3-1kd-2",]
ReMapRPP5[ReMapRPP5$info=="undef_seedling_10d-h3-1kd-1",]
ReMapRPP5[ReMapRPP5$exp.=="GSE101220",]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info) & !grepl("GSE93875",ReMapRPP5$exp.) &
!grepl("leaves_3w-K36M-homoz",ReMapRPP5$info) & !grepl("undef_seedling_10d-h3-1kd-1",ReMapRPP5$info) &
!grepl("undef_seedling_10d-h3-1kd-2",ReMapRPP5$info),]
ReMapRPP5[ReMapRPP5$info=="aerial-part_2w-atring",]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info) & !grepl("GSE93875",ReMapRPP5$exp.) &
!grepl("leaves_3w-K36M-homoz",ReMapRPP5$info) & !grepl("undef_seedling_10d-h3-1kd-1",ReMapRPP5$info) &
!grepl("undef_seedling_10d-h3-1kd-2",ReMapRPP5$info) & !grepl("seedling_3d-wt-ehylene",ReMapRPP5$info),]
ReMapRPP5[ReMapRPP5$info=="seedling_12-14d-suvh1-3",]
ReMapRPP5[ReMapRPP5$info=="undef_seedling_10d-atxr",]
ReMapRPP5[ReMapRPP5$exp.=="GSE111811",]
unique(ReMapRPP5$info)
ReMapRPP5[ReMapRPP5$info=="seedling_3d-ein2-air",]
ReMapRPP5[ReMapRPP5$exp.=="GSE77394",]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info) & !grepl("GSE93875",ReMapRPP5$exp.) &
!grepl("leaves_3w-K36M-homoz",ReMapRPP5$info) & !grepl("undef_seedling_10d-h3-1kd-1",ReMapRPP5$info) &
!grepl("undef_seedling_10d-h3-1kd-2",ReMapRPP5$info) & !grepl("seedling_3d-wt-ehylene",ReMapRPP5$info) &
!grepl("GSE77394",ReMapRPP5$exp.),]
ReMapRPP5[ReMapRPP5$info=="aerial-part_2w-tfl",]
ReMapRPP5[ReMapRPP5$info=="seedling_3w-crh6",]
ReMapRPP5[ReMapRPP5$info=="seedling_6d-arp",]
ReMapRPP5[ReMapRPP5$info=="seedling_3w-crt1",]
ReMapRPP5[ReMapRPP5$info=="roots_7d-hag1",]
ReMapRPP5[ReMapRPP5$epiMod=="H3K27me3",]
ReMapRPP5 <- ReMapRPP5[!grepl("mutant",ReMapRPP5$info) & !grepl("mature",ReMapRPP5$info) & !grepl("senescent",ReMapRPP5$info) &
!grepl("inflorescence",ReMapRPP5$info) & !grepl("drought",ReMapRPP5$info) & !grepl("old",ReMapRPP5$info) &
!grepl("min",ReMapRPP5$info) & !grepl("endosperm",ReMapRPP5$info) & !grepl("-se-",ReMapRPP5$info) &
!grepl("-TSA-",ReMapRPP5$info) & !grepl("-GSNO-",ReMapRPP5$info) & !grepl("flg22",ReMapRPP5$info) &
!grepl("GSE79354",ReMapRPP5$exp.) & !grepl("transgenic",ReMapRPP5$info) & !grepl("GSH",ReMapRPP5$info) &
!grepl("GSE93223",ReMapRPP5$exp.) & !grepl("-acc1",ReMapRPP5$info) & !grepl("GSE93875",ReMapRPP5$exp.) &
!grepl("leaves_3w-K36M-homoz",ReMapRPP5$info) & !grepl("undef_seedling_10d-h3-1kd-1",ReMapRPP5$info) &
!grepl("undef_seedling_10d-h3-1kd-2",ReMapRPP5$info) & !grepl("seedling_3d-wt-ehylene",ReMapRPP5$info) &
!grepl("GSE77394",ReMapRPP5$exp.) & !grepl("GSE100965",ReMapRPP5$exp.),]
ReMapRPP5[ReMapRPP5$info=="seedling_6d-mbd",]
ReMapRPP5[ReMapRPP5$info=="roots_14d-OTU5",]
ReMapRPP5[ReMapRPP5$exp.=="GSE81407",]
unique(ReMapRPP5$info)
ReMapRPP5[ReMapRPP5$info=="seedling_7d-water-6h",]
ReMapRPP5[ReMapRPP5$exp.=="GSE82075",]
ReMapRPP5[ReMapRPP5$info=="aerial-part_3w-pkl-1",]
ReMapRPP5[ReMapRPP5$info=="seedling_14d-mock",]
ReMapRPP5[ReMapRPP5$info=="aerial-part_6d-caa39",]
ReMapRPP5[ReMapRPP5$epiMod=="H2AV",]
unique(remap)
unique(ReMapRPP5$epiMod)
allConditions <- unique(ReMapRPP5$info)
WTonly <- allConditions[-c(4,5,8,10,12,17,18,19,22,23,24,26,32,33,35,36,37,39,40,41,43,44,45,46,49,50,51,52,53,55)]
mutantsOnlu <- allConditions[c(4,5,8,10,12,17,18,19,22,23,24,26,32,33,35,36,37,39,40,41,43,44,45,46,49,50,51,52,53,55)]
WTonly
WTonlyConditions <- allConditions[-c(4,5,8,10,12,17,18,19,22,23,24,26,32,33,35,36,37,39,40,41,43,44,45,46,49,50,51,52,53,55)]
mutantsOnlyConditions <- allConditions[c(4,5,8,10,12,17,18,19,22,23,24,26,32,33,35,36,37,39,40,41,43,44,45,46,49,50,51,52,53,55)]
ReMapRPP5[ReMapRPP5$info==c(WTonlyConditions),]
ReMapRPP5[ReMapRPP5$info %in% c(WTonlyConditions),]
WTonly <- ReMapRPP5[ReMapRPP5$info %in% c(WTonlyConditions),]
View(WTonly)
WTonly$ranges = paste(WTonly$start,"-",WTonly$end, sep = "")
ecotypes <- unique(ReMapRPP5$ecotype)
ecotypes
ReMapRPP5_Col <- ReMapRPP5[ReMapRPP5$ecotype=="Col-0",]
ReMapRPP5_Ler <- ReMapRPP5[ReMapRPP5$ecotype=="Ler",]
rm(WTonly)
WTonly_Col <- ReMapRPP5_Col[ReMapRPP5_Col$info %in% c(WTonlyConditions),]
WTonly_Col$ranges = paste(WTonly_Col$start,"-",WTonly_Col$end, sep = "")
View(WTonly_Col)
WTonly_Col[WTonly_Col$epiMod$=="H3K4me3",]
WTonly_Col[WTonly_Col$epiMod=="H3K4me3",]
mod <- "H3K4me3"
modDF <- WTonly_Col[WTonly_Col$epiMod==mod,]
modDF
nrow(modDF):1
row <- 57
between(modDF[row+1, "start"], modDF[row, "start"], modDF[row, "end"])
modDF[row+1, "start"]
between(modDF[row-1, "start"], modDF[row, "start"], modDF[row, "end"])
modDF
nrow(modDF)
nrow(modDF)-1
row
between(modDF[row, "start"], modDF[row, "start"], modDF[row, "end"])
modDF
toGo <- c()
TorF
TorF <- FALSE
for (row in 1:nrow(modDF)) {
TorF <- FALSE
for (n in 1:nrow(modDF)-1) {
if (between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"]) &
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"])) {
TorF <- TRUE
}
}
if (TorF==TRUE) {
toGo <- append(toGo, row)
}
}
toGo <- c()
for (row in 1:nrow(modDF)) {
TorF <- FALSE
for (n in 1:nrow(modDF)-1) {
if (between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"]) &
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"])) {
TorF <- TRUE
}
}
ifelse(TorF==TRUE, toGo <- append(toGo, row), toGo <- toGo)
}
toGo <- c()
for (row in 1:nrow(modDF)) {
TorF <- FALSE
for (n in 1:nrow(modDF)-1) {
ifelse(between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"]) &
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"]),
TorF <- TRUE, TorF <- TorF)
}
ifelse(TorF==TRUE, toGo <- append(toGo, row), toGo <- toGo)
}
toGo
toGo <- c()
for (row in 1:nrow(modDF)) {
TorF <- FALSE
for (n in 1:nrow(modDF)-1) {
ifelse(between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"]) &
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"]),
TorF <- TRUE, TorF <- TorF)
}
ifelse(TorF==TRUE, toGo <- append(toGo, row), toGo <- toGo)
}
TorF
toGo
modDF
modDF[row, "start"]
modDF[row+n, "start"]
row
n
1:nrow(modDF)-1
toGo <- c()
for (row in 1:nrow(modDF)) {
TorF <- FALSE
for (n in nrow(modDF)-1:1) {
ifelse(between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"]) &
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"]),
TorF <- TRUE, TorF <- TorF)
}
ifelse(TorF==TRUE, toGo <- append(toGo, row), toGo <- toGo)
}
n
row+n
modDF[row, "start"]
modDF[row+n, "start"]
modDF[row+n, "end"]
between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"])
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"])
TorF
ifelse(TorF==TRUE, toGo <- append(toGo, row), toGo <- toGo)
# Make an empty list for recording rows to keep.
toKeep <- c()
for (row in 1:nrow(modDF)) {
TorF <- FALSE
for (n in nrow(modDF)-1:1) {
ifelse(between(modDF[row, "start"], modDF[row+n, "start"], modDF[row+n, "end"]) &
between(modDF[row, "end"], modDF[row+n, "start"], modDF[row+n, "end"]),
TorF <- TRUE, TorF <- TorF)
}
ifelse(TorF==FALSE, toGo <- append(toGo, row), toGo <- toGo)
}
toGo
WTonly_Col_Bed <- GRanges(
seqnames=Rle("chr4",nrow(WTonly_Col)),
ranges=IRanges(WTonly_Col$ranges),
name=WTonly_Col$name)
WTonly_Col_Bed
